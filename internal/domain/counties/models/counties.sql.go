// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: counties.sql

package models

import (
	"context"
	"database/sql"
)

const deleteCounty = `-- name: DeleteCounty :exec
DELETE FROM counties WHERE id = $1
`

func (q *Queries) DeleteCounty(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCounty, id)
	return err
}

const getCountyByID = `-- name: GetCountyByID :one
SELECT id, name, code, treasury_account, created_at, updated_at
FROM counties
WHERE id = $1
`

func (q *Queries) GetCountyByID(ctx context.Context, id int32) (County, error) {
	row := q.db.QueryRowContext(ctx, getCountyByID, id)
	var i County
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.TreasuryAccount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertCounty = `-- name: InsertCounty :one
INSERT INTO counties (name, code, treasury_account)
VALUES ($1, $2, $3)
RETURNING id, name, code, treasury_account, created_at, updated_at
`

type InsertCountyParams struct {
	Name            string         `json:"name"`
	Code            string         `json:"code"`
	TreasuryAccount sql.NullString `json:"treasury_account"`
}

func (q *Queries) InsertCounty(ctx context.Context, arg InsertCountyParams) (County, error) {
	row := q.db.QueryRowContext(ctx, insertCounty, arg.Name, arg.Code, arg.TreasuryAccount)
	var i County
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.TreasuryAccount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCounties = `-- name: ListCounties :many
SELECT id, name, code, treasury_account, created_at, updated_at
FROM counties
ORDER BY name ASC
LIMIT $1 OFFSET $2
`

type ListCountiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCounties(ctx context.Context, arg ListCountiesParams) ([]County, error) {
	rows, err := q.db.QueryContext(ctx, listCounties, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []County
	for rows.Next() {
		var i County
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.TreasuryAccount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCounty = `-- name: UpdateCounty :one
UPDATE counties
SET
    name = CASE WHEN $1::bool THEN $2 ELSE name END,
    treasury_account = CASE WHEN $3::bool THEN $4 ELSE treasury_account END,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $5
RETURNING id, name, code, treasury_account, created_at, updated_at
`

type UpdateCountyParams struct {
	UpdateName            bool           `json:"update_name"`
	Name                  string         `json:"name"`
	UpdateTreasuryAccount bool           `json:"update_treasury_account"`
	TreasuryAccount       sql.NullString `json:"treasury_account"`
	ID                    int32          `json:"id"`
}

func (q *Queries) UpdateCounty(ctx context.Context, arg UpdateCountyParams) (County, error) {
	row := q.db.QueryRowContext(ctx, updateCounty,
		arg.UpdateName,
		arg.Name,
		arg.UpdateTreasuryAccount,
		arg.TreasuryAccount,
		arg.ID,
	)
	var i County
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.TreasuryAccount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
