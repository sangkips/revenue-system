// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: applications.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createApplication = `-- name: CreateApplication :one
INSERT INTO applications (
    id, taxpayer_id, type, notes, status
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, taxpayer_id, type, notes, status, submission_date, approval_date, created_at, updated_at
`

type CreateApplicationParams struct {
	ID         uuid.UUID      `json:"id"`
	TaxpayerID uuid.UUID      `json:"taxpayer_id"`
	Type       string         `json:"type"`
	Notes      sql.NullString `json:"notes"`
	Status     string         `json:"status"`
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.db.QueryRowContext(ctx, createApplication,
		arg.ID,
		arg.TaxpayerID,
		arg.Type,
		arg.Notes,
		arg.Status,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.TaxpayerID,
		&i.Type,
		&i.Notes,
		&i.Status,
		&i.SubmissionDate,
		&i.ApprovalDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createApplicationAssessment = `-- name: CreateApplicationAssessment :exec
INSERT INTO application_assessments (
    application_id, assessment_id
) VALUES (
    $1, $2
)
`

type CreateApplicationAssessmentParams struct {
	ApplicationID uuid.UUID `json:"application_id"`
	AssessmentID  uuid.UUID `json:"assessment_id"`
}

func (q *Queries) CreateApplicationAssessment(ctx context.Context, arg CreateApplicationAssessmentParams) error {
	_, err := q.db.ExecContext(ctx, createApplicationAssessment, arg.ApplicationID, arg.AssessmentID)
	return err
}

const createApplicationDocument = `-- name: CreateApplicationDocument :exec
INSERT INTO application_documents (
    id, application_id, file_path, file_type, uploaded_at
) VALUES (
    $1, $2, $3, $4, $5
)
`

type CreateApplicationDocumentParams struct {
	ID            uuid.UUID    `json:"id"`
	ApplicationID uuid.UUID    `json:"application_id"`
	FilePath      string       `json:"file_path"`
	FileType      string       `json:"file_type"`
	UploadedAt    sql.NullTime `json:"uploaded_at"`
}

func (q *Queries) CreateApplicationDocument(ctx context.Context, arg CreateApplicationDocumentParams) error {
	_, err := q.db.ExecContext(ctx, createApplicationDocument,
		arg.ID,
		arg.ApplicationID,
		arg.FilePath,
		arg.FileType,
		arg.UploadedAt,
	)
	return err
}

const createBuildingApproval = `-- name: CreateBuildingApproval :exec
INSERT INTO building_approvals (
    application_id, project_name, plot_parcel_number, project_type, estimated_project_cost, contact_email, contact_phone
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
`

type CreateBuildingApprovalParams struct {
	ApplicationID        uuid.UUID      `json:"application_id"`
	ProjectName          string         `json:"project_name"`
	PlotParcelNumber     string         `json:"plot_parcel_number"`
	ProjectType          string         `json:"project_type"`
	EstimatedProjectCost string         `json:"estimated_project_cost"`
	ContactEmail         sql.NullString `json:"contact_email"`
	ContactPhone         sql.NullString `json:"contact_phone"`
}

func (q *Queries) CreateBuildingApproval(ctx context.Context, arg CreateBuildingApprovalParams) error {
	_, err := q.db.ExecContext(ctx, createBuildingApproval,
		arg.ApplicationID,
		arg.ProjectName,
		arg.PlotParcelNumber,
		arg.ProjectType,
		arg.EstimatedProjectCost,
		arg.ContactEmail,
		arg.ContactPhone,
	)
	return err
}

const createHealthCertificate = `-- name: CreateHealthCertificate :exec
INSERT INTO health_certificates (
    application_id, applicant_name, business_name, contact_email, contact_phone
) VALUES (
    $1, $2, $3, $4, $5
)
`

type CreateHealthCertificateParams struct {
	ApplicationID uuid.UUID      `json:"application_id"`
	ApplicantName string         `json:"applicant_name"`
	BusinessName  string         `json:"business_name"`
	ContactEmail  sql.NullString `json:"contact_email"`
	ContactPhone  sql.NullString `json:"contact_phone"`
}

func (q *Queries) CreateHealthCertificate(ctx context.Context, arg CreateHealthCertificateParams) error {
	_, err := q.db.ExecContext(ctx, createHealthCertificate,
		arg.ApplicationID,
		arg.ApplicantName,
		arg.BusinessName,
		arg.ContactEmail,
		arg.ContactPhone,
	)
	return err
}

const createSeasonalParkingTicket = `-- name: CreateSeasonalParkingTicket :exec
INSERT INTO seasonal_parking_tickets (
    application_id, vehicle_registration_number, preferred_parking_zone, duration, contact_email, contact_phone
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreateSeasonalParkingTicketParams struct {
	ApplicationID             uuid.UUID      `json:"application_id"`
	VehicleRegistrationNumber string         `json:"vehicle_registration_number"`
	PreferredParkingZone      string         `json:"preferred_parking_zone"`
	Duration                  string         `json:"duration"`
	ContactEmail              sql.NullString `json:"contact_email"`
	ContactPhone              sql.NullString `json:"contact_phone"`
}

func (q *Queries) CreateSeasonalParkingTicket(ctx context.Context, arg CreateSeasonalParkingTicketParams) error {
	_, err := q.db.ExecContext(ctx, createSeasonalParkingTicket,
		arg.ApplicationID,
		arg.VehicleRegistrationNumber,
		arg.PreferredParkingZone,
		arg.Duration,
		arg.ContactEmail,
		arg.ContactPhone,
	)
	return err
}

const createSingleBusinessPermit = `-- name: CreateSingleBusinessPermit :exec
INSERT INTO single_business_permits (
    application_id, business_name, kra_pin, business_type, business_location, number_of_employees
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreateSingleBusinessPermitParams struct {
	ApplicationID     uuid.UUID `json:"application_id"`
	BusinessName      string    `json:"business_name"`
	KraPin            string    `json:"kra_pin"`
	BusinessType      string    `json:"business_type"`
	BusinessLocation  string    `json:"business_location"`
	NumberOfEmployees int32     `json:"number_of_employees"`
}

func (q *Queries) CreateSingleBusinessPermit(ctx context.Context, arg CreateSingleBusinessPermitParams) error {
	_, err := q.db.ExecContext(ctx, createSingleBusinessPermit,
		arg.ApplicationID,
		arg.BusinessName,
		arg.KraPin,
		arg.BusinessType,
		arg.BusinessLocation,
		arg.NumberOfEmployees,
	)
	return err
}

const getApplicationByID = `-- name: GetApplicationByID :one
SELECT 
    a.id, a.taxpayer_id, a.type, a.notes, a.status, a.submission_date, a.approval_date, a.created_at, a.updated_at,
    sbp.business_name, sbp.kra_pin, sbp.business_type, sbp.business_location, sbp.number_of_employees,
    ba.project_name, ba.plot_parcel_number, ba.project_type, ba.estimated_project_cost, ba.contact_email, ba.contact_phone,
    spt.vehicle_registration_number, spt.preferred_parking_zone, spt.duration, spt.contact_email, spt.contact_phone,
    hc.applicant_name, hc.business_name, hc.contact_email, hc.contact_phone,
    t.email AS taxpayer_email, t.phone_number AS taxpayer_phone
FROM applications a
LEFT JOIN single_business_permits sbp ON a.id = sbp.application_id
LEFT JOIN building_approvals ba ON a.id = ba.application_id
LEFT JOIN seasonal_parking_tickets spt ON a.id = spt.application_id
LEFT JOIN health_certificates hc ON a.id = hc.application_id
JOIN taxpayers t ON a.taxpayer_id = t.id
WHERE a.id = $1
`

type GetApplicationByIDRow struct {
	ID                        uuid.UUID      `json:"id"`
	TaxpayerID                uuid.UUID      `json:"taxpayer_id"`
	Type                      string         `json:"type"`
	Notes                     sql.NullString `json:"notes"`
	Status                    string         `json:"status"`
	SubmissionDate            sql.NullTime   `json:"submission_date"`
	ApprovalDate              sql.NullTime   `json:"approval_date"`
	CreatedAt                 sql.NullTime   `json:"created_at"`
	UpdatedAt                 sql.NullTime   `json:"updated_at"`
	BusinessName              sql.NullString `json:"business_name"`
	KraPin                    sql.NullString `json:"kra_pin"`
	BusinessType              sql.NullString `json:"business_type"`
	BusinessLocation          sql.NullString `json:"business_location"`
	NumberOfEmployees         sql.NullInt32  `json:"number_of_employees"`
	ProjectName               sql.NullString `json:"project_name"`
	PlotParcelNumber          sql.NullString `json:"plot_parcel_number"`
	ProjectType               sql.NullString `json:"project_type"`
	EstimatedProjectCost      sql.NullString `json:"estimated_project_cost"`
	ContactEmail              sql.NullString `json:"contact_email"`
	ContactPhone              sql.NullString `json:"contact_phone"`
	VehicleRegistrationNumber sql.NullString `json:"vehicle_registration_number"`
	PreferredParkingZone      sql.NullString `json:"preferred_parking_zone"`
	Duration                  sql.NullString `json:"duration"`
	ContactEmail_2            sql.NullString `json:"contact_email_2"`
	ContactPhone_2            sql.NullString `json:"contact_phone_2"`
	ApplicantName             sql.NullString `json:"applicant_name"`
	BusinessName_2            sql.NullString `json:"business_name_2"`
	ContactEmail_3            sql.NullString `json:"contact_email_3"`
	ContactPhone_3            sql.NullString `json:"contact_phone_3"`
	TaxpayerEmail             string         `json:"taxpayer_email"`
	TaxpayerPhone             sql.NullString `json:"taxpayer_phone"`
}

func (q *Queries) GetApplicationByID(ctx context.Context, id uuid.UUID) (GetApplicationByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getApplicationByID, id)
	var i GetApplicationByIDRow
	err := row.Scan(
		&i.ID,
		&i.TaxpayerID,
		&i.Type,
		&i.Notes,
		&i.Status,
		&i.SubmissionDate,
		&i.ApprovalDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BusinessName,
		&i.KraPin,
		&i.BusinessType,
		&i.BusinessLocation,
		&i.NumberOfEmployees,
		&i.ProjectName,
		&i.PlotParcelNumber,
		&i.ProjectType,
		&i.EstimatedProjectCost,
		&i.ContactEmail,
		&i.ContactPhone,
		&i.VehicleRegistrationNumber,
		&i.PreferredParkingZone,
		&i.Duration,
		&i.ContactEmail_2,
		&i.ContactPhone_2,
		&i.ApplicantName,
		&i.BusinessName_2,
		&i.ContactEmail_3,
		&i.ContactPhone_3,
		&i.TaxpayerEmail,
		&i.TaxpayerPhone,
	)
	return i, err
}

const listApplicationsByTaxpayer = `-- name: ListApplicationsByTaxpayer :many
SELECT 
    a.id, a.taxpayer_id, a.type, a.notes, a.status, a.submission_date, a.approval_date, a.created_at, a.updated_at,
    sbp.business_name, sbp.kra_pin, sbp.business_type, sbp.business_location, sbp.number_of_employees,
    ba.project_name, ba.plot_parcel_number, ba.project_type, ba.estimated_project_cost, ba.contact_email, ba.contact_phone,
    spt.vehicle_registration_number, spt.preferred_parking_zone, spt.duration, spt.contact_email, spt.contact_phone,
    hc.applicant_name, hc.business_name, hc.contact_email, hc.contact_phone,
    t.email AS taxpayer_email, t.phone_number AS taxpayer_phone
FROM applications a
LEFT JOIN single_business_permits sbp ON a.id = sbp.application_id
LEFT JOIN building_approvals ba ON a.id = ba.application_id
LEFT JOIN seasonal_parking_tickets spt ON a.id = spt.application_id
LEFT JOIN health_certificates hc ON a.id = hc.application_id
JOIN taxpayers t ON a.taxpayer_id = t.id
WHERE a.taxpayer_id = $1
ORDER BY a.created_at DESC
`

type ListApplicationsByTaxpayerRow struct {
	ID                        uuid.UUID      `json:"id"`
	TaxpayerID                uuid.UUID      `json:"taxpayer_id"`
	Type                      string         `json:"type"`
	Notes                     sql.NullString `json:"notes"`
	Status                    string         `json:"status"`
	SubmissionDate            sql.NullTime   `json:"submission_date"`
	ApprovalDate              sql.NullTime   `json:"approval_date"`
	CreatedAt                 sql.NullTime   `json:"created_at"`
	UpdatedAt                 sql.NullTime   `json:"updated_at"`
	BusinessName              sql.NullString `json:"business_name"`
	KraPin                    sql.NullString `json:"kra_pin"`
	BusinessType              sql.NullString `json:"business_type"`
	BusinessLocation          sql.NullString `json:"business_location"`
	NumberOfEmployees         sql.NullInt32  `json:"number_of_employees"`
	ProjectName               sql.NullString `json:"project_name"`
	PlotParcelNumber          sql.NullString `json:"plot_parcel_number"`
	ProjectType               sql.NullString `json:"project_type"`
	EstimatedProjectCost      sql.NullString `json:"estimated_project_cost"`
	ContactEmail              sql.NullString `json:"contact_email"`
	ContactPhone              sql.NullString `json:"contact_phone"`
	VehicleRegistrationNumber sql.NullString `json:"vehicle_registration_number"`
	PreferredParkingZone      sql.NullString `json:"preferred_parking_zone"`
	Duration                  sql.NullString `json:"duration"`
	ContactEmail_2            sql.NullString `json:"contact_email_2"`
	ContactPhone_2            sql.NullString `json:"contact_phone_2"`
	ApplicantName             sql.NullString `json:"applicant_name"`
	BusinessName_2            sql.NullString `json:"business_name_2"`
	ContactEmail_3            sql.NullString `json:"contact_email_3"`
	ContactPhone_3            sql.NullString `json:"contact_phone_3"`
	TaxpayerEmail             string         `json:"taxpayer_email"`
	TaxpayerPhone             sql.NullString `json:"taxpayer_phone"`
}

func (q *Queries) ListApplicationsByTaxpayer(ctx context.Context, taxpayerID uuid.UUID) ([]ListApplicationsByTaxpayerRow, error) {
	rows, err := q.db.QueryContext(ctx, listApplicationsByTaxpayer, taxpayerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListApplicationsByTaxpayerRow
	for rows.Next() {
		var i ListApplicationsByTaxpayerRow
		if err := rows.Scan(
			&i.ID,
			&i.TaxpayerID,
			&i.Type,
			&i.Notes,
			&i.Status,
			&i.SubmissionDate,
			&i.ApprovalDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BusinessName,
			&i.KraPin,
			&i.BusinessType,
			&i.BusinessLocation,
			&i.NumberOfEmployees,
			&i.ProjectName,
			&i.PlotParcelNumber,
			&i.ProjectType,
			&i.EstimatedProjectCost,
			&i.ContactEmail,
			&i.ContactPhone,
			&i.VehicleRegistrationNumber,
			&i.PreferredParkingZone,
			&i.Duration,
			&i.ContactEmail_2,
			&i.ContactPhone_2,
			&i.ApplicantName,
			&i.BusinessName_2,
			&i.ContactEmail_3,
			&i.ContactPhone_3,
			&i.TaxpayerEmail,
			&i.TaxpayerPhone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplicationStatus = `-- name: UpdateApplicationStatus :exec
UPDATE applications
SET status = $2, approval_date = CASE WHEN $2 = 'approved' THEN CURRENT_TIMESTAMP ELSE approval_date END, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateApplicationStatusParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdateApplicationStatus(ctx context.Context, arg UpdateApplicationStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateApplicationStatus, arg.ID, arg.Status)
	return err
}
