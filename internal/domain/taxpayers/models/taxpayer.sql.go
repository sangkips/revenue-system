// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: taxpayer.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const deleteTaxpayer = `-- name: DeleteTaxpayer :exec
DELETE FROM taxpayers WHERE id = $1
`

func (q *Queries) DeleteTaxpayer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTaxpayer, id)
	return err
}

const getTaxpayerByID = `-- name: GetTaxpayerByID :one
SELECT id, county_id, taxpayer_type, national_id, email, phone_number,
       first_name, last_name, business_name, created_at, updated_at
FROM taxpayers
WHERE id = $1
`

func (q *Queries) GetTaxpayerByID(ctx context.Context, id uuid.UUID) (Taxpayer, error) {
	row := q.db.QueryRowContext(ctx, getTaxpayerByID, id)
	var i Taxpayer
	err := row.Scan(
		&i.ID,
		&i.CountyID,
		&i.TaxpayerType,
		&i.NationalID,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.BusinessName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTaxpayerByNationalID = `-- name: GetTaxpayerByNationalID :one
SELECT id, county_id, taxpayer_type, national_id, email, phone_number,
       first_name, last_name, business_name, created_at, updated_at
FROM taxpayers
WHERE national_id = $1
`

func (q *Queries) GetTaxpayerByNationalID(ctx context.Context, nationalID string) (Taxpayer, error) {
	row := q.db.QueryRowContext(ctx, getTaxpayerByNationalID, nationalID)
	var i Taxpayer
	err := row.Scan(
		&i.ID,
		&i.CountyID,
		&i.TaxpayerType,
		&i.NationalID,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.BusinessName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertTaxpayer = `-- name: InsertTaxpayer :one
INSERT INTO taxpayers (
    county_id, taxpayer_type, national_id, email, phone_number, 
    first_name, last_name, business_name
)
VALUES (
    $1, $2, $3, $4, $5,
    $6, $7, $8
)
RETURNING id, county_id, taxpayer_type, national_id, email, phone_number, first_name, last_name, business_name, created_at, updated_at
`

type InsertTaxpayerParams struct {
	CountyID     int32          `json:"county_id"`
	TaxpayerType string         `json:"taxpayer_type"`
	NationalID   string         `json:"national_id"`
	Email        string         `json:"email"`
	PhoneNumber  sql.NullString `json:"phone_number"`
	FirstName    sql.NullString `json:"first_name"`
	LastName     sql.NullString `json:"last_name"`
	BusinessName sql.NullString `json:"business_name"`
}

func (q *Queries) InsertTaxpayer(ctx context.Context, arg InsertTaxpayerParams) (Taxpayer, error) {
	row := q.db.QueryRowContext(ctx, insertTaxpayer,
		arg.CountyID,
		arg.TaxpayerType,
		arg.NationalID,
		arg.Email,
		arg.PhoneNumber,
		arg.FirstName,
		arg.LastName,
		arg.BusinessName,
	)
	var i Taxpayer
	err := row.Scan(
		&i.ID,
		&i.CountyID,
		&i.TaxpayerType,
		&i.NationalID,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.BusinessName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTaxpayers = `-- name: ListTaxpayers :many
SELECT id, county_id, taxpayer_type, national_id, email, phone_number,
       first_name, last_name, business_name, created_at, updated_at
FROM taxpayers
WHERE county_id = $3
ORDER BY created_at ASC
LIMIT $1 OFFSET $2
`

type ListTaxpayersParams struct {
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
	CountyID int32 `json:"county_id"`
}

func (q *Queries) ListTaxpayers(ctx context.Context, arg ListTaxpayersParams) ([]Taxpayer, error) {
	rows, err := q.db.QueryContext(ctx, listTaxpayers, arg.Limit, arg.Offset, arg.CountyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Taxpayer
	for rows.Next() {
		var i Taxpayer
		if err := rows.Scan(
			&i.ID,
			&i.CountyID,
			&i.TaxpayerType,
			&i.NationalID,
			&i.Email,
			&i.PhoneNumber,
			&i.FirstName,
			&i.LastName,
			&i.BusinessName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaxpayer = `-- name: UpdateTaxpayer :one
UPDATE taxpayers
SET
    email = $1,
    phone_number = $2,
    first_name = $3,
    last_name = $4,
    business_name = $5,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $6
RETURNING id, county_id, taxpayer_type, national_id, email, phone_number, first_name, last_name, business_name, created_at, updated_at
`

type UpdateTaxpayerParams struct {
	Email        string         `json:"email"`
	PhoneNumber  sql.NullString `json:"phone_number"`
	FirstName    sql.NullString `json:"first_name"`
	LastName     sql.NullString `json:"last_name"`
	BusinessName sql.NullString `json:"business_name"`
	ID           uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateTaxpayer(ctx context.Context, arg UpdateTaxpayerParams) (Taxpayer, error) {
	row := q.db.QueryRowContext(ctx, updateTaxpayer,
		arg.Email,
		arg.PhoneNumber,
		arg.FirstName,
		arg.LastName,
		arg.BusinessName,
		arg.ID,
	)
	var i Taxpayer
	err := row.Scan(
		&i.ID,
		&i.CountyID,
		&i.TaxpayerType,
		&i.NationalID,
		&i.Email,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.BusinessName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
