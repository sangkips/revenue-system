// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, county_id, username, email, first_name, last_name, phone_number, role, employee_id, department, is_active, last_login, created_at, updated_at
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID          uuid.UUID      `json:"id"`
	CountyID    sql.NullInt32  `json:"county_id"`
	Username    string         `json:"username"`
	Email       string         `json:"email"`
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Role        string         `json:"role"`
	EmployeeID  sql.NullString `json:"employee_id"`
	Department  sql.NullString `json:"department"`
	IsActive    sql.NullBool   `json:"is_active"`
	LastLogin   sql.NullTime   `json:"last_login"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.CountyID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Role,
		&i.EmployeeID,
		&i.Department,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, county_id, username, email, password_hash, first_name, last_name, phone_number, role, employee_id, department, is_active, last_login, created_at, updated_at
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CountyID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Role,
		&i.EmployeeID,
		&i.Department,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (id, county_id, username, email, password_hash, first_name, last_name, phone_number, role, employee_id, department, is_active)
VALUES (uuid_generate_v4(), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, county_id, username, email, password_hash, first_name, last_name, phone_number, role, employee_id, department, is_active, last_login, created_at, updated_at
`

type InsertUserParams struct {
	CountyID     sql.NullInt32  `json:"county_id"`
	Username     string         `json:"username"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	FirstName    string         `json:"first_name"`
	LastName     string         `json:"last_name"`
	PhoneNumber  sql.NullString `json:"phone_number"`
	Role         string         `json:"role"`
	EmployeeID   sql.NullString `json:"employee_id"`
	Department   sql.NullString `json:"department"`
	IsActive     sql.NullBool   `json:"is_active"`
}

// Return the created user
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.CountyID,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Role,
		arg.EmployeeID,
		arg.Department,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CountyID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Role,
		&i.EmployeeID,
		&i.Department,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllUsers = `-- name: ListAllUsers :many
SELECT id, county_id, username, email, first_name, last_name, phone_number, role, employee_id, department, is_active, last_login, created_at, updated_at
FROM users
ORDER BY username ASC
LIMIT $1 OFFSET $2
`

type ListAllUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListAllUsersRow struct {
	ID          uuid.UUID      `json:"id"`
	CountyID    sql.NullInt32  `json:"county_id"`
	Username    string         `json:"username"`
	Email       string         `json:"email"`
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Role        string         `json:"role"`
	EmployeeID  sql.NullString `json:"employee_id"`
	Department  sql.NullString `json:"department"`
	IsActive    sql.NullBool   `json:"is_active"`
	LastLogin   sql.NullTime   `json:"last_login"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

func (q *Queries) ListAllUsers(ctx context.Context, arg ListAllUsersParams) ([]ListAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllUsersRow
	for rows.Next() {
		var i ListAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.CountyID,
			&i.Username,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.Role,
			&i.EmployeeID,
			&i.Department,
			&i.IsActive,
			&i.LastLogin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, county_id, username, email, first_name, last_name, phone_number, role, employee_id, department, is_active, last_login, created_at, updated_at
FROM users
WHERE county_id = $3
ORDER BY username ASC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit    int32         `json:"limit"`
	Offset   int32         `json:"offset"`
	CountyID sql.NullInt32 `json:"county_id"`
}

type ListUsersRow struct {
	ID          uuid.UUID      `json:"id"`
	CountyID    sql.NullInt32  `json:"county_id"`
	Username    string         `json:"username"`
	Email       string         `json:"email"`
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Role        string         `json:"role"`
	EmployeeID  sql.NullString `json:"employee_id"`
	Department  sql.NullString `json:"department"`
	IsActive    sql.NullBool   `json:"is_active"`
	LastLogin   sql.NullTime   `json:"last_login"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset, arg.CountyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.CountyID,
			&i.Username,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.Role,
			&i.EmployeeID,
			&i.Department,
			&i.IsActive,
			&i.LastLogin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  email = CASE WHEN $1::boolean THEN $2 ELSE email END,
  first_name = CASE WHEN $3::boolean THEN $4 ELSE first_name END,
  last_name = CASE WHEN $5::boolean THEN $6 ELSE last_name END,
  phone_number = CASE WHEN $7::boolean THEN $8 ELSE phone_number END,
  role = CASE WHEN $9::boolean THEN $10 ELSE role END,
  employee_id = CASE WHEN $11::boolean THEN $12 ELSE employee_id END,
  department = CASE WHEN $13::boolean THEN $14 ELSE department END,
  is_active = CASE WHEN $15::boolean THEN $16 ELSE is_active END,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $17
`

type UpdateUserParams struct {
	UpdateEmail       bool           `json:"update_email"`
	Email             string         `json:"email"`
	UpdateFirstName   bool           `json:"update_first_name"`
	FirstName         string         `json:"first_name"`
	UpdateLastName    bool           `json:"update_last_name"`
	LastName          string         `json:"last_name"`
	UpdatePhoneNumber bool           `json:"update_phone_number"`
	PhoneNumber       sql.NullString `json:"phone_number"`
	UpdateRole        bool           `json:"update_role"`
	Role              string         `json:"role"`
	UpdateEmployeeID  bool           `json:"update_employee_id"`
	EmployeeID        sql.NullString `json:"employee_id"`
	UpdateDepartment  bool           `json:"update_department"`
	Department        sql.NullString `json:"department"`
	UpdateIsActive    bool           `json:"update_is_active"`
	IsActive          sql.NullBool   `json:"is_active"`
	ID                uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.UpdateEmail,
		arg.Email,
		arg.UpdateFirstName,
		arg.FirstName,
		arg.UpdateLastName,
		arg.LastName,
		arg.UpdatePhoneNumber,
		arg.PhoneNumber,
		arg.UpdateRole,
		arg.Role,
		arg.UpdateEmployeeID,
		arg.EmployeeID,
		arg.UpdateDepartment,
		arg.Department,
		arg.UpdateIsActive,
		arg.IsActive,
		arg.ID,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpdateUserPasswordParams struct {
	PasswordHash string    `json:"password_hash"`
	ID           uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.PasswordHash, arg.ID)
	return err
}
