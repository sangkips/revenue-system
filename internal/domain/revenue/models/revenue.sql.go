// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: revenue.sql

package models

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const deleteRevenue = `-- name: DeleteRevenue :exec
DELETE FROM revenues WHERE id = $1
`

func (q *Queries) DeleteRevenue(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRevenue, id)
	return err
}

const getRevenueByID = `-- name: GetRevenueByID :one
SELECT id, taxpayer_id, county_id, amount, revenue_type, transaction_date, description,
       created_at, updated_at
FROM revenues
WHERE id = $1
`

func (q *Queries) GetRevenueByID(ctx context.Context, id uuid.UUID) (Revenue, error) {
	row := q.db.QueryRowContext(ctx, getRevenueByID, id)
	var i Revenue
	err := row.Scan(
		&i.ID,
		&i.TaxpayerID,
		&i.CountyID,
		&i.Amount,
		&i.RevenueType,
		&i.TransactionDate,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertRevenue = `-- name: InsertRevenue :exec
INSERT INTO revenues (
    taxpayer_id, county_id, amount, revenue_type, transaction_date, description
)
VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, taxpayer_id, county_id, amount, revenue_type, transaction_date, description, created_at, updated_at
`

type InsertRevenueParams struct {
	TaxpayerID      uuid.UUID      `json:"taxpayer_id"`
	CountyID        int32          `json:"county_id"`
	Amount          string         `json:"amount"`
	RevenueType     string         `json:"revenue_type"`
	TransactionDate time.Time      `json:"transaction_date"`
	Description     sql.NullString `json:"description"`
}

func (q *Queries) InsertRevenue(ctx context.Context, arg InsertRevenueParams) error {
	_, err := q.db.ExecContext(ctx, insertRevenue,
		arg.TaxpayerID,
		arg.CountyID,
		arg.Amount,
		arg.RevenueType,
		arg.TransactionDate,
		arg.Description,
	)
	return err
}

const listRevenues = `-- name: ListRevenues :many
SELECT id, taxpayer_id, county_id, amount, revenue_type, transaction_date, description,
       created_at, updated_at
FROM revenues
WHERE county_id = $3
ORDER BY transaction_date DESC
LIMIT $1 OFFSET $2
`

type ListRevenuesParams struct {
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
	CountyID int32 `json:"county_id"`
}

func (q *Queries) ListRevenues(ctx context.Context, arg ListRevenuesParams) ([]Revenue, error) {
	rows, err := q.db.QueryContext(ctx, listRevenues, arg.Limit, arg.Offset, arg.CountyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Revenue
	for rows.Next() {
		var i Revenue
		if err := rows.Scan(
			&i.ID,
			&i.TaxpayerID,
			&i.CountyID,
			&i.Amount,
			&i.RevenueType,
			&i.TransactionDate,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRevenue = `-- name: UpdateRevenue :exec
UPDATE revenues
SET 
    amount = $1,
    revenue_type = $2,
    transaction_date = $3,
    description = $4,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $5
RETURNING id, taxpayer_id, county_id, amount, revenue_type, transaction_date, description, created_at, updated_at
`

type UpdateRevenueParams struct {
	Amount          string         `json:"amount"`
	RevenueType     string         `json:"revenue_type"`
	TransactionDate time.Time      `json:"transaction_date"`
	Description     sql.NullString `json:"description"`
	ID              uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateRevenue(ctx context.Context, arg UpdateRevenueParams) error {
	_, err := q.db.ExecContext(ctx, updateRevenue,
		arg.Amount,
		arg.RevenueType,
		arg.TransactionDate,
		arg.Description,
		arg.ID,
	)
	return err
}
